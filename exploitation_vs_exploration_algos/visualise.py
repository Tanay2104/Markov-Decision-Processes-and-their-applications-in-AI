import numpy as np
import matplotlib.pyplot as plt
import strict_greedy, epsilon_greedy

k  = 10
arm_values = np.random.normal(size=k)
steps=1000
runs=2000
width = 12
height = 4

plt.violinplot(positions=range(1, k+1), dataset=[np.random.normal(loc = arm_value, size=10000) for arm_value in arm_values], showmeans=True)
plt.ylabel("Reward Distribution")
plt.xlabel("Action")
plt.title("A Reward-Action Graph")
plt.tight_layout()
plt.savefig("Reward-Action Graph", dpi=200, bbox_inches='tight')
plt.show()

algorithms = {
    "Strict Greedy": strict_greedy,
    "Epsilon Greedy": epsilon_greedy
}
def run(algorithm_name):
    reward_history=np.zeros(shape=(runs, steps))
    optimality_history=np.zeros(shape=(runs, steps))

    for run_idx in range(runs):
        arm_values = np.random.normal(size=k)
        algorithm = algorithms[algorithm_name].algo(k)
        optimum_action = np.argmax(arm_values)
        for step_idx in range(steps):
            max_index = algorithm.choose()
            reward = np.random.normal(loc = arm_values[max_index])
            algorithm.update(max_index, reward)
            reward_history[run_idx][step_idx]=reward
            optimality_history[run_idx][step_idx] = True if max_index==optimum_action else False

    average_reward = np.average(reward_history, axis=0)
    percent_optimal_action = np.average(optimality_history, axis=0)*100

    return average_reward, percent_optimal_action

def draw_individual(algorithm_name):
    average_reward, percent_optimal_action = run(algorithm_name)

    plt.figure(figsize=(width, height))

    plt.subplot(1,2, 1)
    plt.plot(average_reward)
    plt.xlabel("Steps")
    plt.ylabel("Average Reward")
    plt.title("Reward vs Steps")

    plt.subplot(1,2, 2)
    plt.plot(percent_optimal_action)
    plt.xlabel("Steps")
    plt.ylabel("% Optimal action")
    plt.title("%Optimal action vs Steps")

    plt.suptitle(f"The {algorithm_name} algorithm")
    plt.tight_layout()
    plt.savefig(f"{algorithm_name} algorithm performance", dpi=200, bbox_inches='tight')
    plt.show()

def draw_together():
    plt.figure(figsize=(width, height))

    for algorithm_name, algorithm in algorithms.items():
        average_reward, percent_optimal_action = run(algorithm_name)
        plt.subplot(1,2, 1)
        plt.plot(average_reward, label=algorithm_name)
        plt.xlabel("Steps")
        plt.ylabel("Average Reward")
        plt.title("Reward vs Steps")
        plt.legend()

        plt.subplot(1,2, 2)
        plt.plot(percent_optimal_action, label=algorithm_name)
        plt.xlabel("Steps")
        plt.ylabel("% Optimal action")
        plt.title("%Optimal action vs Steps")
        plt.legend()

    plt.suptitle("Relative performace of algorithms")
    plt.tight_layout()
    plt.savefig("Relative algorithm performance", dpi=200, bbox_inches='tight')
    plt.show()

draw_together()